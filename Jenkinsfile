// Jenkinsfile
pipeline {
    agent any

    environment {
        dockerImage = "employee-crud/elearning"
        // Define the environment variable for your .env file
        envFile = ".env"
    }

    stages {
        stage('Checkout from GitHub') {
            steps {
                git url: 'https://github.com/ithapavishal/employee-crud.git', branch: 'django-compose-pipeline'
            }
        }

        stage('Build with Docker Compose') {
 
            steps {
                echo "Building Docker Compose services"
                // This command reads docker-compose.yml and builds the images for all services
                // It also uses the .env file to substitute variables
                sh 'docker compose -f docker-compose.yml --env-file $envFile build'
            }
            post {
                success {
                    echo "Build completed, archiving artifacts"
                    // It's generally better to archive the entire build folder for debugging
                    // but you can keep this specific to the database file if you prefer
                    archiveArtifacts artifacts: '**.postgresql', followSymlinks: false
                }
            }
        }

        stage('Tag and Push Images') {
     
            steps {
                script {
                    withDockerRegistry([credentialsId: 'dockerhub-credentials', url: '' ]) {
                        // Tag the built image with the Jenkins build number
                        // // The image name is generated by Docker Compose (e.g., employee-crud-web_services)
                        sh "docker tag employee-crud-web_services $dockerImage:$BUILD_NUMBER"
                        sh "docker push $dockerImage:$BUILD_NUMBER"

                        // For multi-service deployments, you'll need to decide which images to push.
                        // Here, we're assuming only the Django app needs to be pushed.
                        // You could also push a specific image: sh "docker push $dockerImage:$BUILD_NUMBER"
                    }
                }
            }
        }

        stage('Deploy to Development Env') {
  
            steps {
                echo 'Deploying to development env'
                // Stop and remove previous containers with the same project name
                sh "docker compose -p employeedev -f docker-compose.yml --env-file $envFile down"

                // Deploy with docker compose up
                // -p: specifies a project name to avoid conflicts
                // -d: detached mode
                // --build: rebuilds if necessary, but we already did this in the build stage
                sh "docker compose -p employeedev -f docker-compose.yml --env-file $envFile up -d"

                echo 'Development environment deployed!'
            }
        }

        stage('Deploy to Production Env') {

            steps {
                timeout(time: 1, unit: 'DAYS') {
                    input id: 'confirm', message: 'Approve deployment to production environment?'
                }
                echo "Deploying to prod env"
                sh "docker compose -p employeeprod -f docker-compose.yml --env-file $envFile down"
                sh "docker compose -p employeeprod -f docker-compose.yml --env-file $envFile up -d"
                echo 'Production environment deployed!'
            }
        }
    }
    
    post {
        always {
            mail to: 'v01.thapa@gmail.com',
            subject: "Job '${JOB_NAME}' (${BUILD_NUMBER}) status",
            body: "Please go to ${BUILD_URL} and verify the build"
        }
        success {
            mail bcc: '', body: """Hi Team,
            Build #$BUILD_NUMBER is successful, please go through the url
            $BUILD_URL
            and verify the details.
            Regards,
            Devops Team""", cc: '', from: '', replyTo: '', subject: 'BUILD SUCCESS NOTIFICATION', to: 'v01.thapa@gmail.com'
        }
        failure {
            mail bcc: '', body: """Hi Team,
            Build #$BUILD_NUMBER is unsuccessful, please go through the url
            $BUILD_URL
            and verify the details.
            Regards,
            Devops Team""", cc: '', from: '', replyTo: '', subject: 'BUILD FAILED NOTIFICATION', to: 'v01.thapa@gmail.com'
        }
    }
}